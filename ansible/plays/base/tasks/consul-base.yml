---
- name: Copy consul ca cert
  ansible.builtin.copy:
    dest: '/etc/consul.d/{{ ENVIRONMENT }}-consul-agent-ca.pem'
    src: './files/consul/{{ ENVIRONMENT }}-consul-agent-ca.pem'
    mode: '0644'
  become: true

- name: Copy consul client cert
  ansible.builtin.copy:
    dest: '/etc/consul.d/{{ CONSUL_DATACENTER }}-client-consul-latest.pem'
    src: './files/consul/{{ CONSUL_DATACENTER }}-client-consul-latest.pem'
    mode: '0644'
  become: true

- name: Copy consul client key
  ansible.builtin.copy:
    dest: '/etc/consul.d/{{ CONSUL_DATACENTER }}-client-consul-latest-key.pem'
    src: './files/consul/{{ CONSUL_DATACENTER }}-client-consul-latest-key.pem'
    mode: '0644'
  become: true

- name: Template consul.hcl
  ansible.builtin.template:
    src: ./templates/consul/consul.hcl.j2
    dest: /etc/consul.d/consul.hcl
    mode: '0644'
  become: true
  vars:
    CONSUL_KEY: "{{ lookup('file', './files/consul/{{ ENVIRONMENT }}-consul-gossip.key') }}"

- name: Append hostname to /etc/hosts
  ansible.builtin.shell:
    cmd: echo "127.0.0.1 $(hostname)" >> /etc/hosts
  become: true

- name: Upload dnsmasq config script
  ansible.builtin.copy:
    dest: /usr/local/bin/update-dnsmasq-config.sh
    content: |
      #!/bin/bash
      LEASE_FILE="/run/systemd/netif/leases/2"

      # Check that the lease file exists
      if [ ! -f "$LEASE_FILE" ]; then
          echo "Lease file not found: $LEASE_FILE" >&2
          exit 1
      fi

      # Extract the AWS provided DNS from the lease file (the line starting with "DNS=")
      aws_dns=$(grep '^DNS=' "$LEASE_FILE" | cut -d= -f2)
      if [ -z "$aws_dns" ]; then
          echo "DNS entry not found in $LEASE_FILE" >&2
          exit 1
      fi

      # Write the dnsmasq configuration to a dedicated file
      cat <<EOF > /etc/dnsmasq.d/10-consul.conf
      # Configuration generated by update-dnsmasq-config.sh

      # Forward queries for node.consul to Consul on port 8600
      server=/consul/127.0.0.1#8600

      # Fallback: use the AWS provided DNS from the DHCP lease
      server=${aws_dns}
      EOF

      echo "dnsmasq configuration updated with fallback DNS ${aws_dns}"
    mode: '0755'
  become: true

- name: Ensure dnsmasq.service.d directory exists
  ansible.builtin.file:
    path: /etc/systemd/system/dnsmasq.service.d
    state: directory
    mode: '0755'
  become: true

- name: Create dnsmasq systemd drop-in
  ansible.builtin.copy:
    dest: /etc/systemd/system/dnsmasq.service.d/override.conf
    content: |
      [Service]
      ExecStartPre=/usr/local/bin/update-dnsmasq-config.sh
    mode: '0644'
  become: true

- name: Create docker.service.d directory
  ansible.builtin.file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: '0755'
  become: true

- name: Add ExecStartPost to docker service to dnsmasq reload on new docker0 if
  ansible.builtin.copy:
    dest: /etc/systemd/system/docker.service.d/override.conf
    content: |
      [Service]
      ExecStartPost=/usr/bin/systemctl restart dnsmasq
    mode: '0644'
  become: true

- name: Update DNS configuration for Consul in a single sudo call
  ansible.builtin.shell: |
    systemctl stop systemd-resolved && systemctl disable systemd-resolved
    systemctl restart dnsmasq && systemctl enable dnsmasq
    rm -f /etc/resolv.conf
    cat <<EOF > /etc/resolv.conf
    nameserver 127.0.0.1
    search node.consul
    EOF
  become: true
