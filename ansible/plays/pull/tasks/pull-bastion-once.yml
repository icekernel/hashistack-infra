---
- name: Bootstrap ACL on consul
  ansible.builtin.shell:
    cmd: |
      consul acl bootstrap
  delegate_to: localhost
  register: bootstrap_acl

- name: Set fact for bootstrap secret id
  set_fact:
    bootstrap_acl_secret: "{{ (bootstrap_acl.stdout | regex_search('SecretID:\\s+([0-9a-f-]+)', '\\1'))[0] }}"
  when: bootstrap_acl.stdout is defined

- name: Set ACL token on AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/consul/acl_token'
    secret: '{{ bootstrap_acl_secret }}'
    state: present
    region: '{{ aws_region }}'
  when: bootstrap_acl.stdout is defined

- name: Add ACL token to shell profile
  ansible.builtin.copy:
    dest: /etc/profile.d/consul.sh
    content: 'export CONSUL_HTTP_TOKEN="{{ bootstrap_acl_secret }}"'
  become: true
  when: bootstrap_acl.stdout is defined

- name: Create node registration policy
  community.general.consul_policy:
    token: '{{ bootstrap_acl_secret }}'
    name: 'node-registration'
    rules: |
      node_prefix "" {
        policy = "write"
      }
      service_prefix "" {
        policy = "write"
      }
      agent_prefix "" {
        policy = "write"
      }
      key_prefix "" {
        policy = "write"
      }
  register: node_registration_policy
  when: bootstrap_acl_secret is defined

- name: Create node registration token
  community.general.consul_token:
    policies:
      - name: node-registration
    description: 'Node registration token'
    token: '{{ bootstrap_acl_secret }}'
  register: node_registration_token
  when: bootstrap_acl_secret is defined

- name: Set the node registration token in AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/consul/node_registration'
    secret: '{{ node_registration_token.token.SecretID }}'
    region: '{{ aws_region }}'
  when: bootstrap_acl_secret is defined

- name: Create minimal policy for DNS lookups only
  community.general.consul_policy:
    token: '{{ bootstrap_acl_secret }}'
    name: 'dns-lookup'
    rules: |
      node_prefix "" {
        policy = "read"
      }

      service_prefix "" {
        policy = "read"
      }

      agent_prefix "" {
        policy = "deny"
      }

      key_prefix "" {
        policy = "deny"
      }

      session_prefix "" {
        policy = "deny"
      }
  register: dns_lookup_policy
  when: bootstrap_acl_secret is defined

- name: List all Consul tokens
  ansible.builtin.shell:
    cmd: consul acl token list -token={{ bootstrap_acl_secret }} -format=json
  register: consul_token_list

- name: Set fact for anonymous token accessor ID
  set_fact:
    anonymous_accessor_id: "{{ 'AccessorID' | extract((consul_token_list.stdout | from_json) | selectattr('SecretID', 'equalto', 'anonymous') | list | first) }}"
  when: consul_token_list.stdout is defined

- name: Attach DNS lookup policy to anonymous token
  community.general.consul_token:
    policies:
      - name: dns-lookup
    token: '{{ bootstrap_acl_secret }}'
    accessor_id: '{{ anonymous_accessor_id }}'
  when: bootstrap_acl_secret is defined and anonymous_accessor_id is defined

- name: Create consul server policy
  community.general.consul_policy:
    token: '{{ bootstrap_acl_secret }}'
    name: 'consul-server'
    rules: |
      agent_prefix "" {
        policy = "write"
      }

      node_prefix "" {
        policy = "write"
      }

      service_prefix "" {
        policy = "write"
      }

      key_prefix "" {
        policy = "read"
      }
  register: consul_server_policy
  when: bootstrap_acl_secret is defined

- name: Create consul server token
  community.general.consul_token:
    policies:
      - name: consul-server
    description: 'Consul server token'
    token: '{{ bootstrap_acl_secret }}'
  register: consul_server_token
  when: bootstrap_acl_secret is defined

- name: Set the consul server token in AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/consul/consul_server_registration'
    secret: '{{ consul_server_token.token.SecretID }}'
    region: '{{ aws_region }}'
  when: bootstrap_acl_secret is defined

- name: Copy the server acl.hcl with content
  ansible.builtin.copy:
    content: |
      acl {
        enabled = true
        default_policy = "deny"
        tokens {
          default = "{{ consul_server_token.token.SecretID }}"
        }
      }
    dest: /etc/consul.d/acl.hcl
    owner: consul
    group: consul
    mode: '0600'
  become: true
  when: bootstrap_acl_secret is defined

- name: Restart consul
  ansible.builtin.systemd:
    name: consul
    state: restarted
  become: true
  when: bootstrap_acl_secret is defined

- name: Bootstrap ACL on nomad
  ansible.builtin.shell:
    cmd: |
      NOMAD_ADDR=https://localhost:4646 \
      NOMAD_CACERT=/etc/nomad.d/{{ ENVIRONMENT }}-ca.pem \
      NOMAD_CLIENT_CERT=/etc/nomad.d/{{ ENVIRONMENT }}-cli.pem \
      NOMAD_CLIENT_KEY=/etc/nomad.d/{{ ENVIRONMENT }}-cli-key.pem \
      nomad acl bootstrap
  delegate_to: localhost
  register: bootstrap_acl_nomad

- name: Set fact for nomad secret id bootstrap
  set_fact:
    bootstrap_acl_secret_nomad: "{{ (bootstrap_acl_nomad.stdout | regex_search('Secret ID\\s+=\\s+([0-9a-f-]+)', '\\1'))[0] }}"
  when: bootstrap_acl_nomad.stdout is defined

- name: Set Nomad ACL token on AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/nomad/acl_token'
    secret: '{{ bootstrap_acl_secret_nomad }}'
    state: present
    region: '{{ aws_region }}'
  when: bootstrap_acl_nomad.stdout is defined

- name: Add ACL token to shell profile
  ansible.builtin.copy:
    dest: /etc/profile.d/nomad_acl.sh
    content: 'export NOMAD_TOKEN="{{ bootstrap_acl_secret_nomad }}"'
  become: true
  when: bootstrap_acl_nomad.stdout is defined

- name: Create the consul policy for nomad agents
  community.general.consul_policy:
    token: '{{ bootstrap_acl_secret }}'
    name: 'nomad-agents'
    rules: |
      agent_prefix "" {
        policy = "read"
      }

      node_prefix "" {
        policy = "write"
      }

      service_prefix "" {
        policy = "write"
      }
  register: nomad_agents_policy
  when: bootstrap_acl_secret is defined

- name: Create nomad agents token on consul
  community.general.consul_token:
    policies:
      - name: nomad-agents
    description: 'Nomad agents token'
    token: '{{ bootstrap_acl_secret }}'
  register: nomad_agents_token
  when: bootstrap_acl_secret is defined

- name: Set the nomad agents token in AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/consul/nomad_agents'
    secret: '{{ nomad_agents_token.token.SecretID }}'
    region: '{{ aws_region }}'
  when: bootstrap_acl_secret is defined

- name: Create client policy file
  ansible.builtin.copy:
    content: |
      namespace "*" {
        policy = "read"
      }
      node {
        policy = "write"
      }
      agent {
        policy = "write"
      }
    dest: /tmp/nomad-client-policy.hcl
    mode: '0600'
  delegate_to: localhost

- name: Apply client policy
  ansible.builtin.shell:
    cmd: |
      NOMAD_ADDR=https://localhost:4646 \
      NOMAD_CACERT=/etc/nomad.d/{{ ENVIRONMENT }}-ca.pem \
      NOMAD_CLIENT_CERT=/etc/nomad.d/{{ ENVIRONMENT }}-cli.pem \
      NOMAD_CLIENT_KEY=/etc/nomad.d/{{ ENVIRONMENT }}-cli-key.pem \
      NOMAD_TOKEN={{ bootstrap_acl_secret_nomad }} \
      nomad acl policy apply -description "Node Client Policy" nomad-client-policy /tmp/nomad-client-policy.hcl
  delegate_to: localhost
  register: client_policy_result
  when: bootstrap_acl_secret_nomad is defined

- name: Create client token
  ansible.builtin.shell:
    cmd: |
      NOMAD_ADDR=https://localhost:4646 \
      NOMAD_CACERT=/etc/nomad.d/{{ ENVIRONMENT }}-ca.pem \
      NOMAD_CLIENT_CERT=/etc/nomad.d/{{ ENVIRONMENT }}-cli.pem \
      NOMAD_CLIENT_KEY=/etc/nomad.d/{{ ENVIRONMENT }}-cli-key.pem \
      NOMAD_TOKEN={{ bootstrap_acl_secret_nomad }} \
      nomad acl token create -name "client-token" -policy nomad-client-policy -type client -global -json
  delegate_to: localhost
  register: client_token_result
  when: bootstrap_acl_secret_nomad is defined

- name: Parse client token
  set_fact:
    client_token_secret: '{{ (client_token_result.stdout | from_json).SecretID }}'
  when: client_token_result.stdout is defined

- name: Store client token in AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/nomad/client_token'
    secret: '{{ client_token_secret }}'
    state: present
    region: '{{ aws_region }}'
  when: client_token_secret is defined

- name: Create vault server policy
  community.general.consul_policy:
    token: '{{ bootstrap_acl_secret }}'
    name: 'vault-server'
    rules: |
      node_prefix "{{ ENVIRONMENT }}-bastion-" {
        policy = "write"
      }

      service "vault" {
        policy = "write"
      }

      agent_prefix "" {
        policy = "read"
      }

      session_prefix "{{ ENVIRONMENT }}-bastion-" {
        policy = "write"
      }

      check_prefix "vault" {
        policy = "write"
      }

      key_prefix "vault/" {
        policy = "write"
      }
  register: vault_server_policy
  when: bootstrap_acl_secret is defined

- name: Create vault server token
  community.general.consul_token:
    policies:
      - name: vault-server
    description: 'Vault server token'
    token: '{{ bootstrap_acl_secret }}'
  register: vault_server_token_output
  when: bootstrap_acl_secret is defined

- name: Set the vault server token in AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/consul/vault_server_registration'
    secret: '{{ vault_server_token_output.token.SecretID }}'
    region: '{{ aws_region }}'
  when: vault_server_token_output.token.SecretID is defined

- name: Set fact for vault_server_token
  set_fact:
    vault_server_token: '{{ vault_server_token_output.token.SecretID }}'
  when: vault_server_token_output.token.SecretID is defined

- name: Copy vault server cert
  ansible.builtin.copy:
    dest: '/etc/vault.d/{{ ENVIRONMENT }}-{{ CONSUL_DOMAIN }}-server.pem'
    src: '../../base/files/vault/{{ ENVIRONMENT }}-{{ CONSUL_DOMAIN }}-server.pem'
    mode: '0644'
  become: true

- name: Copy vault server key
  ansible.builtin.copy:
    dest: '/etc/vault.d/{{ ENVIRONMENT }}-{{ CONSUL_DOMAIN }}-server-key.pem'
    src: '../../base/files/vault/{{ ENVIRONMENT }}-{{ CONSUL_DOMAIN }}-server-key.pem'
    mode: '0644'
  become: true

- name: Template vault.hcl with server config
  ansible.builtin.template:
    src: vault/server.hcl.j2
    dest: /etc/vault.d/vault.hcl
    mode: '0644'
  become: true

- name: Enable and start vault on systemd
  ansible.builtin.systemd:
    name: vault
    enabled: true
    state: started
  become: true

- name: Initialize vault using CLI
  ansible.builtin.shell: |
    vault operator init -address=http://127.0.0.1:8200 -recovery-shares=1 -recovery-threshold=1 -format=json
  become: true
  register: vault_init_output

- name: Set fact for vault root token
  set_fact:
    vault_root_token: '{{ (vault_init_output.stdout | from_json).root_token }}'
  when: vault_init_output.stdout is defined

- name: Set fact for vault recovery keys b64
  set_fact:
    vault_recovery_keys_b64: '{{ (vault_init_output.stdout | from_json).recovery_keys_b64 }}'
  when: vault_init_output.stdout is defined

- name: Set fact for vault recovery keys hex
  set_fact:
    vault_recovery_keys_hex: '{{ (vault_init_output.stdout | from_json).recovery_keys_hex }}'
  when: vault_init_output.stdout is defined

- name: Set the vault root token in AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/vault/vault_root_token'
    secret: '{{ vault_root_token }}'
    region: '{{ AWS_REGION }}'
  when: vault_root_token is defined

- name: Set the vault recovery keys b64 in AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/vault/vault_recovery_keys_b64'
    secret: '{{ vault_recovery_keys_b64 }}'
    region: '{{ AWS_REGION }}'
  when: vault_recovery_keys_b64 is defined

- name: Set the vault recovery keys hex in AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/vault/vault_recovery_keys_hex'
    secret: '{{ vault_recovery_keys_hex }}'
    region: '{{ AWS_REGION }}'
  when: vault_recovery_keys_hex is defined

- name: Add Vault root token to shell profile
  ansible.builtin.copy:
    dest: /etc/profile.d/vault.sh
    content: |
      export VAULT_TOKEN="{{ vault_root_token }}"
      export VAULT_ADDR="http://127.0.0.1:8200"
  become: true
  when: vault_root_token.stdout is defined

- name: Enable AppRole auth method on vault
  ansible.builtin.shell:
    cmd: |
      VAULT_TOKEN={{ vault_root_token }} \
      VAULT_ADDR=http://127.0.0.1:8200 \
      vault auth enable approle
  become: true

- name: Create AppRole for each of our microservices
  hashivault_policy:
    name: 'approle-{{ item.name }}'
    rules: '{{ item.rules }}'
    token: '{{ vault_root_token }}'
    url: 'http://127.0.0.1:8200'
    authtype: token
  with_items:
    - name: proxy
      rules: |
        path "pki/issue/proxy" {
          capabilities = ["update"]
        }
        path "auth/token/create" {
          capabilities = ["update"]
        }
        path "secret/proxy/*" {
          capabilities = ["read"]
        }
    - name: billing
      rules: |
        path "pki/issue/billing" {
          capabilities = ["update"]
        }
        path "auth/token/create" {
          capabilities = ["update"]
        }
        path "secret/billing/*" {
          capabilities = ["read"]
        }
    - name: history
      rules: |
        path "pki/issue/history" {
          capabilities = ["update"]
        }
        path "auth/token/create" {
          capabilities = ["update"]
        }
        path "secret/history/*" {
          capabilities = ["read"]
        }
    - name: shop
      rules: |
        path "pki/issue/shop" {
          capabilities = ["update"]
        }
        path "auth/token/create" {
          capabilities = ["update"]
        }
        path "secret/shop/*" {
          capabilities = ["read"]
        }
    - name: bot
      rules: |
        path "pki/issue/bot" {
          capabilities = ["update"]
        }
        path "auth/token/create" {
          capabilities = ["update"]
        }
        path "secret/bot/*" {
          capabilities = ["read"]
        }

- name: Create the app role for all microservices
  hashivault_approle_role:
    name: '{{ item.name }}'
    token_policies:
      - 'approle-{{ item.name }}'
    token: '{{ vault_root_token }}'
    url: 'http://127.0.0.1:8200'
    authtype: token
  register: approle_output
  with_items:
    - name: proxy
    - name: billing
    - name: history
    - name: shop
    - name: bot

- name: Create a vault agent policy to fetch app role secrets and ids
  hashivault_policy:
    name: 'vault-agent'
    rules: |
      path "auth/approle/role/*" {
        capabilities = ["read"]
      }
    token: '{{ vault_root_token }}'
    url: 'http://127.0.0.1:8200'
    authtype: token

- name: Create a vault agent token
  hashivault_token_create:
    display_name: 'vault-agent'
    policies:
      - 'vault-agent'
    token: '{{ vault_root_token }}'
    url: 'http://127.0.0.1:8200'
    authtype: token
  register: vault_agent_token

- name: Store the vault agent token in AWS Secrets Manager
  community.aws.secretsmanager_secret:
    name: '/{{ ENVIRONMENT }}/vault/agent_token'
    secret: '{{ vault_agent_token.token.auth.client_token }}'
    region: '{{ AWS_REGION }}'
