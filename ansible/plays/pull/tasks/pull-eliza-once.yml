---
- name: Gather instance tags into a dictionary
  set_fact:
    my_instance_tags: '{{ my_instance_tags | default({}) | combine({tag_key: item.value}) }}'
  loop: "{{ hostvars[inventory_hostname] | dict2items | selectattr('key','match','^ansible_ec2_tags_instance_.*') }}"
  vars:
    tag_key: "{{ item.key | regex_replace('^ansible_ec2_tags_instance_','') }}"

- name: Set aws_region from the instance metadata
  set_fact:
    aws_region: '{{ meta.ansible_facts.ansible_ec2_placement_region }}'

- name: Set the environment from the instance metadata
  set_fact:
    ENVIRONMENT: '{{ my_instance_tags.Environment }}'

- name: Show collected instance tags
  debug:
    var: my_instance_tags

- name: Get the customer id from the instance tag
  set_fact:
    customer_id: '{{ my_instance_tags.CustomerId }}'

- name: Fetch the secret from Secrets Manager
  set_fact:
    eliza_secret: "{{ lookup('amazon.aws.aws_secret', ENVIRONMENT +'-'+ role +'-'+ customer_id, region=aws_region) }}"

- name: Place the meta.json file in the right place
  copy:
    content: '{{ eliza_secret.meta | to_nice_json }}'
    dest: /home/eliza/meta.json
  become: true
  become_user: '{{ role }}'

- name: Place the character.json file in the right place
  copy:
    content: '{{ eliza_secret.character | to_nice_json }}'
    dest: /home/eliza/eliza.character.json
  become: true
  become_user: '{{ role }}'

- name: Place the env file in the right place
  copy:
    content: '{{ eliza_secret.env | to_nice_json }}'
    dest: /home/eliza/eliza.env.json
  become: true
  become_user: '{{ role }}'

- name: Make the eliza.env.json a valid dotenv file
  shell: |
    jq -r 'to_entries | .[] | .key + "=" + .value' /home/eliza/eliza.env.json > /home/eliza/eliza.env
  become: true
  become_user: '{{ role }}'

- name: Set github_repo from the instance metadata
  set_fact:
    github_repo: '{{ my_instance_tags.GitHubRepoUrl }}'

- name: Set checkout_revision from the instance metadata
  set_fact:
    checkout_revision: '{{ my_instance_tags.CheckoutRevision }}'

- name: Clone service's git repository
  ansible.builtin.git:
    repo: '{{ github_repo }}'
    dest: '/home/{{ role }}/{{ role }}'
    # separate_git_dir: '/home/{{role}}/{{role}}.git'
    version: '{{ checkout_revision }}'
    depth: 1
    accept_hostkey: true
    # key_file: '{{ key_file }}'
  become: true
  become_user: '{{ role }}'

- name: Place docker-compose.yml in the right place
  copy:
    content: |
      services:
        tee:
          build:
              context: ./eliza/
              dockerfile: Dockerfile
          stdin_open: true
          tty: true
          volumes:
              - /var/run/tappd.sock:/var/run/tappd.sock
              - tee:/app/packages/client-twitter/src/tweetcache
              - tee:/app/db.sqlite
              - ./eliza.character.json:/app/characters/eliza.character.json
          env_file:
              - ./eliza.env
          ports:
            - "3000:3000"
          restart: always
          command:
            ["pnpm", "start", '--character="characters/eliza.character.json"']
      volumes:
          tee:
    dest: '/home/{{ role }}/docker-compose.yml'
  become: true
  become_user: '{{ role }}'

- name: Start eliza with docker-compose
  ansible.builtin.command:
    cmd: docker-compose -f /home/{{ role }}/docker-compose.yml up -d
  become: true
  become_user: '{{ role }}'

- name: Wait for eliza to start
  wait_for:
    port: 3000
    delay: 5
    timeout: 300
  become: true
  become_user: '{{ role }}'

- name: Retrieve existing nginx upstreams from consul
  ansible.builtin.command: consul kv get nginx/upstreams
  become: true
  register: consul_upstreams
  changed_when: false
  ignore_errors: true

- name: Set fact for current upstreams (default to empty list)
  ansible.builtin.set_fact:
    upstreams: "{{ consul_upstreams.stdout | default('[]') | from_json }}"

- name: Append current instance to upstreams
  ansible.builtin.set_fact:
    updated_upstreams: "{{ upstreams + [ {'id': customer_id, 'address': ansible_default_ipv4.address ~ ':3000'} ] }}"

- name: Update consul kv with new upstreams
  ansible.builtin.command: consul kv put nginx/upstreams '{{ updated_upstreams | to_json }}'
  become: true
  become_user: '{{ role }}'
